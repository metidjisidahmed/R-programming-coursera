The assignment syntax:
  x<-3 
  y<-"hello"
  print(x)
  output ; [1] 3
  this output indicates that the x is a type of a vector ([])  and the 3 is the      content of the x vector ( the number 1 is just an index)
the comment syntax:
  # my comment 
generate a squences of numbers : 
  x:y # genrate all the integers in [x ,y]
  example:
    x<-1:20 # [1] 1 2 3 4 5 6 7 8 9 10 ..... 20
    
------------------- Data Types -----------------
the basic types are : 
integer , character , logical , numeric ( real) , complex
vector ( collection of elements of the same type )
list ( collection of elements of different types )
we can create an empty vector with function vector(type , length)
the object may have attributes (names , dimnames , dimensions, class , length  , ...etc)
we access to the attributes using the attributes() function
inf = infinity , NaN=not a number , T=True , F=false

------------- Vectors and lists ----------------------
1. vectors
there are two ways to create a vector : 
  not initialized :
    v<-vectore(type="numeric" , length=10 )
  iniitialized :
    v<-c(1 , 5 , 13 , 18)
if we tried to mix most than a type in the vector , it will keep most common type example: c(1.7 , TRUE) will became c(1.7 , 1) and c(2.3 , "a") will be c("2.3" , "a")

2- Lists
to create a list we use the list function : list()3
example : v<-list(3+5i , 45 , "b" , FALSE)
in reality : the list isnt but a vector of vectors , the previous assignment is equivalent to : v<-c(c(3+5i) , c(45) , c("b") , c(False))

------------- Matrices ----------------------
create a matrix :
m<-matrix(nrow=3 , ncol=2) #create a matrix of 3 rows and 2 columns

to get the dimension :
dim(m) # return c(3,2)

create an initialized matrix ( the matrix is filled column-wised , it means colon by colon) : 
m<-matrix(1:6 , nrow =3 , ncol=2)
#return :
# 1   4 
# 2   5
# 3   6

convert a vector to matrix :
example : 
v<-c(1:9) # a vector of 9 values ( from 1 to 9)
dim(v)<-c(3,3) # its like we said nrow=3 , ncol=3 so he will be a matrix

create matrix by the column-binding/row-binding

example in column-binding (cbind)
x<-c(1,2,3)
y<-c(4,5,6
m<-cbind(x,y) # its like we concatenate the two vectors vertically
#return :
# 1   4 
# 2   5
# 3   6

example in row-binding (cbind)
x<-c(1,2,3)
y<-c(4,5,6
m<-rbind(x,y) # its like we concatenate the two vectors vertically
#return :
# 1   2   3 
# 4   5   6

------------------- Factors -----------------
it represesnts the possible values we may have in the array of the values we take from a population ( like in PRST1)

initialize a factor :
  x<-factor(c("Yes" , "No" , "Yes" , "Yes", "No"))
  table(x) # returns Yes : 3  , No:2
  attributes(x, "levels") # returns [ "no" , "yes"]
initialize a factor and define all the levels :
  x<-factor(c("Yes" , "No" , "Yes" , "Yes", "No") , levels=c("Yes" , "No" , "Maybe"))
  
-------------------- Data Frames -------------------
its like a vector where each elemnt is list and these lists have the same length.
so we can consider it as a matrix having different data types where :
  the number of columns : the number of lists
  the number of lines: the length of the line
  
We can name the raws and the columns using row.names  
creating a data frame from an existing source: 
  using read.table() and read.csv() ( the data frames has the same structure as an excel file)
  we can convert data frames to a matrix (the changing of types will be apllied)
  calling : data.matrix()
  
creating a new data frame :
x<-data.frame(foo=3:6 , bar=c("V" , "V" , "F" , "V")) #returns :
    foo     bar 
1   3       "V"
2   4       "V"
3   5       "F"
4   6       "V"
ncol(x) # =2
nraw(x) # =4






